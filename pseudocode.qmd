---
title: "Pseudocode: Craps Simulation"
author: "Dada Zhang"
---

# Instructor Comments

I have scaffolded this set of instructions very carefully. 

Please proceed sequentially through this document, and do not move onto the next step until you have completed the present step.

My goal in this class is to teach you how to solve hard problems by breaking them down. 
This assignment is the culmination of that process, where you demonstrate that you have the tools to solve these hard problems. 

You WILL get confused and miss steps if you do not follow the instructions sequentially.

# Understanding the game flow

ChatGPT provides the following pseudocode for playing a game of craps. 
You can see the full script [here](deps/ChatGPT Pseudocode.html) (it goes a bit beyond pseudocode).

Note that this pseudocode seems to be relatively Pythonic. 
You will have the opportunity to write (somewhat different) pseudocode later, but for now, work with this pseudocode to develop an understanding of the game.

```{}
function playCraps():
    while true:
        // Roll the dice
        roll = rollDice()

        // Check the outcome of the roll
        if isComeOutRoll(roll):
            handleComeOutRoll(roll)
        else:
            handlePointRoll(roll)

        // Display current status and ask if the player wants to continue
        displayCurrentStatus()
        if not playAgain():
            break

function rollDice():
    die1 = random(1, 6)
    die2 = random(1, 6)
    total = die1 + die2
    return total

function isComeOutRoll(roll):
    return roll in [2, 3, 7, 11, 12]

function handleComeOutRoll(roll):
    if roll in [7, 11]:
        playerWins()
    elif roll in [2, 3, 12]:
        playerLoses()
    else:
        point = roll
        displayPointMessage(point)
        handlePointRoll(point)

function handlePointRoll(point):
    while true:
        roll = rollDice()

        if roll == point:
            playerWins()
            break
        elif roll == 7:
            playerLoses()
            break

function playerWins():
    displayWinMessage()

function playerLoses():
    displayLoseMessage()

function displayPointMessage(point):
    // Display the point for the current round

function displayWinMessage():
    // Display a message indicating the player has won

function displayLoseMessage():
    // Display a message indicating the player has lost

function displayCurrentStatus():
    // Display the current status of the game

function playAgain():
    // Ask the player if they want to play again
    // Return True if the player wants to play again, False otherwise

```

## Flowchart {#sec-flowchart}

Create a flowchart illustrating how the game unfolds, using the function names provided in the ChatGPT code. 
Include this as a PNG file in the repository and link to it here. 

<!-- Your image should go here. Use markdown syntax to add the image and give it a useful caption -->
I modified the figure provided for this homework, and see the below. 
![Flowchart of the game](./figure/simulation_flowchart.png)

## Single game data structure {#sec-single-game-data}

It's one thing to write a set of instructions/pseudocode for how to *play* a game, but it's a separate task to figure out how to **computationally simulate** the game. 
For instance, in a simulation you often need to keep track of each move, and then compute summary statistics about the game to use when compiling simulation data.

Draw/sketch a tabular data structure that can store the results as you progress through a single game of craps. Keep track of how many times you've rolled the dice.
What additional columns do you need? 
Hint: Each roll of the 2 dice should be a row.

<!-- Here you should include either a picture of your sketch or a markdown table -->

I simulated some outcomes for a single game round, dividing it into win and loss categories following by different scenarios.


**Win game**

Option 1: when the player rolls 2 dices in first rolling is 7 or 11. See the following table as an example. 

| Rolling Number  | Dice 1 | Dice 2  | Total points | Roll Outcome  | Point  | Outcome             |
|-----------------|--------|---------|--------------|---------------|--------|---------------------|
| 1               | 3      | 4       | 7            | ComeOut       | -      | Win                 |


Option 2: when the player rolls 2 dices in first rolling is 4, 5, 6, 8, 9, or 10, then the second rolling is the exact same points as the first rolling. See the following table as an example.

| Rolling Number  | Dice 1 | Dice 2  | Total points | Roll Outcome  | Point  | Outcome             |
|-----------------|--------|---------|--------------|---------------|--------|---------------------|
| 1               | 2      | 6       | 8            | PointRoll     | 8      | Point Set           |
| 2               | 3      | 5       | 8            | PointRoll     | 8      | Win (Point Matched) |


Option 3: when the player rolls 2 dices in first rolling is 4, 5, 6, 8, 9, or 10, and the following rolling has the points are not 7 or not `Point` (the points same as in first rolling), and rolling until the points show the the exact same points as the first rolling. See the following table as an example.

| Rolling Number  | Dice 1 | Dice 2  | Total points | Roll Outcome  | Point  | Outcome             |
|-----------------|--------|---------|--------------|---------------|--------|---------------------|
| 1               | 2      | 6       | 8            | ComeOut       | 8      | Point Set           |
| 2               | 6      | 5       | 11           | PointRoll     | 8      | Continue            |
| .               | .      | .       | .            | PointRoll     | 8      | .                   |
| .               | .      | .       | .            | PointRoll     | 8      | .                   |
| n               | 4      | 4       | 8            | PointRoll     | 8      | Win (Point Matched) |

**Notes:**

-   The `Outcome` represents `Win (Point Matched)` will show `win` only when working on code. 


**Loss game**

Option 1: when the player rolls 2 dices in the first rolling is 2, 3, or 12. See the following table as an example. 

| Rolling Number  | Dice 1 | Dice 2  | Total points | Roll Outcome  | Point  | Outcome             |
|-----------------|--------|---------|--------------|---------------|--------|---------------------|
| 1               | 6      | 6       | 12           | ComeOut       | -      | Loss(crapping out)  |

Option 2: when the player rolls 2 dices in the first rolling is 4, 5, 6, 8, 9, or 10, and the following rolling has the points are not 8 or 7, continue rolling dices, until the last rolling has points of 7.

| Rolling Number  | Dice 1 | Dice 2  | Total points | Roll Outcome  | Point  | Outcome             |
|-----------------|--------|---------|--------------|---------------|--------|---------------------|
| 1               | 2      | 6       | 6            | PointRoll     | 8      | Point Set           |
| 2               | 5      | 4       | 9            | PointRoll     | 8      | Continue            |
| .               | .      | .       | .            | PointRoll     | 8      | .                   |
| .               | .      | .       | .            | PointRoll     | 8      | .                   |
| n               | 3      | 4       | 7            | PointRoll     | 8      | Loss(7-out)         |


**Notes:**

-   The `ComeOut` represents `ComeOutRoll` in the code that includes the total points of 2, 3, 7, 11, and 12.

-   The `PointRoll` includes the total points are 1, 4, 5, 6, 8, 9, and 10.

-   The `point`: when `Roll Outcome` is `PointRoll` then an subsequent roll will be recorded until the player either win or loss the game.


## Summary data structure {#sec-game-summary-data}

Draw/sketch a summary tabular data structure to store summary information from a single game of craps.    
Hint: Each game of craps should yield a single row in your table.

<!-- Here you should include either a picture of your sketch or a markdown table -->

Continuing the above tables, let's summarize the statistics for **win** and **loss.** First, there are 36 outcomes when rolling two dices. To win the game, the total points of the two dices are 7 or 11. What is the probability of the outcome is 7 or 11?

-   $Prob(7) = \frac{6}{36}$, $Prob(11) = \frac{2}{36}$

-   $Prob(7\ or\ 11) = \frac{6+2}{36} = \frac{8}{36}$

Alternative, the player wins the game in two or more rollings as discussed above. Let's summarize some statistics:

-   $Prob(4) = \frac{3}{36}$, $Prob(5) = \frac{4}{36}$, $Prob(6) = \frac{5}{36}$, $Prob(8) = \frac{5}{36}$, $Prob(9) = \frac{4}{36}$, $Prob(10) = \frac{3}{36}$

-   $Prob(Point\ Set) = Prob(4\ or\ 5\ or\ 6\ or\ 8\ or\ 9\ or\ 10) = \frac{3+4+5+5+4+3}{36} = \frac{24}{36}$

-   Example: probability of wining the game in two rollings, where the first rolling shows points 8. The probability is $\frac{5}{36} \times \frac{5}{36}$.

-   Winning a game in exact 2 rollings: the probability is $\frac{24}{36} \times (\frac{24}{36} \times \frac{1}{6}) = \frac{24}{36} \times \frac{1}{9} = \frac{8}{108}$ where $Prob(Point) = \frac{24}{36} \times \frac{1}{6} = \frac{1}{9}$.

-   Winning a game in `n` rollings: $Prob(Point\ Set) = \frac{24}{36}$; $Prob(not\ 7\ and\ not\ Point) = 1 - \frac{6}{36} - \frac{1}{9} = \frac{26}{36}$, then the final probability of winning the game in `n` rolling is $Prob(Point\ Set) \times Prob(not\ 7\ and\ not\ Point)^n \times Prob(Point)$, which is $\frac{24}{36} \times (\frac{26}{36})^{n-2} \times \frac{1}{9}$

-   Note: you can combine the results of rolling number of 2 and `n`. For instance, under condition of `n`, when $n=2$, the result is same as the condition of $id=2$.


| id (Rolling number)   | Outcome | Statistics                                                      |
|-----------------------|---------|-----------------------------------------------------------------|
| 1                     | Win     | $\frac{8}{36}$                                                  |
| 2                     | Win     | $\frac{24}{36} \times \frac{1}{9}$                              |
| n                     | Win     | $\frac{24}{36} \times (\frac{26}{36})^{n-2} \times \frac{1}{9}$ |


When loss the game, the most direct way is rolling two dices in first rolling with the total points are 2, 3, or 12. Additionally, the player could loss game in multiple rounds. See the following statistics. 

-   $Prob(2) = \frac{1}{36}$, $Prob(3) = \frac{2}{36}$, $Prob(12) = \frac{1}{36}$

-   $Prob(2\ or\ 3 \ or\ 12) = \frac{1+2+1}{36} = \frac{4}{36}$

-   Loss a game in `n` rollings: we know that $Prob(Point\ Set) = \frac{24}{36}$, $Prob(Point\ Set) = \frac{1}{9}$, and $Prob(not\ 7\ and\ not\ Point) =\frac{26}{36}$. Then the probability is $\frac{24}{36} \times (\frac{26}{36})^{n-2} \times \frac{1}{6}$.


| id (Rolling number)   | Outcome | Statistics                                                       |
|-----------------------|---------|------------------------------------------------------------------|
| 1                     | Loss    | $\frac{4}{36}$                                                   |
| n                     | Loss    | $\frac{24}{36} \times (\frac{26}{36})^{n-2} \times \frac{1}{6}$  |


# Simulating a game of craps {#sec-simulation-pseudocode}

In this part of the assignment, you'll spend the time figuring out how to implement craps as a computational simulation by adapting the ChatGPT pseudocode. 
Your code structure will be different from ChatGPT's structure because you are going to generate data to estimate various conditional probabilities.

**Requirement 1:**    
You must have a function to simulate a single craps game, `simulate_craps_game`, which returns a data frame with at least the following columns: 

- `id` (# times the dice has been rolled)
- `roll` (the total roll of the dice)
- `outcome` (win, loss, or continue)

You may have additional columns if you want.

**Requirement 2:**    
You must include a summary function named `summarize_craps_game` that takes the data frame returned by `simulate_craps_game` and generates a single row with the following columns:

- `n_rolls`, the number of times the dice were rolled in the game,
- `outcome`, whether the game was won or lost
- `point`, the total of the dice on the first roll, if the game continued past the first roll, and NA otherwise.

**Requirement 3:**    
You must include a function to run your simulation, `run_craps_simulation(N)` that takes a single integer argument `N` which determines the number of games which will be played. 

Think carefully about how you want to structure your code - do you want to return the full results for each game and then summarize, or do you want to summarize before you return the full results?


## Planning Helper Functions {#sec-helper}

Consider helper functions you will need to write to implement the game of craps. 
For each function, define the input, output, and provide a comment to explain what the function will do.

Here is pseudocode for a function that simulates the roll of the dice in craps to demonstrate the required format.

```
roll_dice <- function() {
  # Input: None
  # Output: an integer from 1:12
  # Description: Generate 2 random integers from 1 to 6 and sum them
}
```

Put each function in a separate code block.

## Planning Main Functions {#sec-main-function-diagram}

Update your flowchart from @sec-flowchart to match the requirements of this section. 
Your flowchart should have separate blocks for each function. 
Which helper function(s) will be called inside each required function?

<!-- Include a picture here using markdown image format. Save the picture in your repository and remember to commit it! -->

## Simulating a full game {#sec-game-pseudocode}

Fill in the pseudocode below to specify how you would return the single game data structure you created in @sec-single-game-data above. 
Remember to fill in the input parameter inside the function definition as well as the comment.

```
simulate_craps_game <- function() {
  # store data in a dataframe ... 
  # I searched this on web
  craps_data <- data.frame(
    # referring to requirement: id, roll, outcome
    # also checking my own table.
    id    = integer(),
    dice1 = integer(),
    dice2 = integer(), 
    roll  = integer(),
    # before outcome: roll_outcome
    point = character(),
    # outcome is character: win, loss,
    outcome = character(),
    stringsAsFactors = FALSE
  )
  
  # Setup: roll the die, generate a number from 1 of 6, integer
  roll_die <- function() sample(1:6, 1)
  # Input: set up initial num, including id (rolling number), roll (Total points), 
  # Input: outcome (win, loss (crapping out), continue), point
  # keep lowercase for consistent
  rolling_number <- 1
  outcome <- "continue" # win or loss will be direct output
  point <- NA
  
  # write a loop referring to the provided code previously
  repeat {
    # rolling two dice
    dice1 <- roll_die()
    dice2 <- roll_die()
    total_points <- dice1 + dice2
    
    ## Be careful for the loop, it's easy to mess up and take more time to fix
    # multiple conditions
    # come-out/crapping-out
    if (is.na(point)) {
      # win
      if (total_points == 7 || total_points == 11) {
        outcome <- "win"
        break
      } else if (total_points == 2 || total_points == 3 || total_points == 12) {
        outcome <- "loss(crapping out)"
        break
      } else {
        # if the total_points shows4,5,6,8,9,10
        point <- total_points
        outcome <- "continue"
      }
    } else {
      # another loop for multiple conditions
      if (total_points == point) {
        outcome <- "win"
        break
      } else if (total_points == 7) {
        outcome <- "loss(7-out)"
        break
      } else {
        outcome <- "continue"
      }
    }
    # store output in the loop 
    craps_data <- rbind(craps_data, data.frame(
      id    = rolling_number,
      dice1 = dice1,
      dice2 = dice2, 
      roll  = total_points,
      point = ifelse(is.na(point), "-", as.character(point)),
      outcome = outcome))
    # keep rolling ...
    rolling_number <- rolling_number + 1
  }
  ## repeat this again, otherwise `continue` show all columns in `outcome`
  # store output in the loop 
  craps_data <- rbind(craps_data, data.frame(
    id    = rolling_number,
    dice1 = dice1,
    dice2 = dice2, 
    roll  = total_points,
    point = ifelse(is.na(point), "-", as.character(point)),
    outcome = outcome))
  
  # return to beginning
  return(craps_data)
}
```

## Summarizing a game {#sec-game-summary-pseudocode}

Add a function that summarizes a game of craps (e.g. go from the data structure in @sec-single-game-data to the data structure in @sec-game-summary-data).

```
summarize_craps_game <- function() {
  # let's recall requirement 2: n_rolls, outcome, point
  # n_rolls = id; outcome = win,loss,continue; point = point
  ## referring to previous step, we have a dataframe - craps_data, is an output of simulating the game
  
  # Input: 
  n_rolls <- nrow(craps_data)  # I wanna all content in each row
  # if the first roll is not win or loss(crapping out), the `Point` exists and `outcome` shows `continue`
  first_roll_point <- ifelse(n_rolls > 1, craps_data$point[2], "None")
  # process <- 
  last_outcome <- tail(craps_data$outcome, 1)
  # Output: 
  # summarize the whole process, similar to Requirement 1
  craps_summary <- data.frame(
    n_rolls = n_rolls,
    outcome = last_outcome,
    point   = first_roll_point,
    stringsAsFactors = FALSE
  )
  return(craps_summary)
  # Description:
  # how do i check this function? 
  # input = craps_data
}
```

## Simulating many games {#sec-game-simulation-pseudocode}


```
run_craps_simulation <- function(N) {
  # recall previous results: craps_data, process_summary
  
  # Input: an integer N which determines the number of games to simulate
  # we still need an empty datafrome used for further storing output.
  craps_final_summary <- data.frame(
    n_rolls = integer(),
    point   = character(),
    outcome = character(),
    stringsAsFactors = FALSE
  )
  
  # build a loop
  for (i in 1:N) {
    # Store full game simulation
    craps_data_summary <- simulate_craps_game() #I keep using the `craps_data` as previous
    # Store a game
    craps_summary      <- summarize_craps_game(craps_data_summary)
    # Store many games
    craps_final_summary <- rbind(craps_final_summary, craps_summary)
  }
  
  # Output: 
  # Description:
  return(craps_final_summary)
}
```

## Planning for implementation

What parts are still missing for you to write code implementing craps based on your pseudocode? 

-   I did not test the code for Requirements 1--3, and Requirement 1 took me a long, long time to fix the error.
-   I was not confident that I followed the instructions to fill in the code following Output and Description ...
-   I created a table for summary statistics but did not include it in the function, and need to complete for further steps.

What do you expect you will need to do before/during the coding process?

-   Be familiar with `loop` conditions, I prefer using `if` and `else` to make me easily understand, so I need to be very good at this to finish this homework.
-   I want to test my code; for example, in `summarize_craps_game`, how do I know it works?

Make a plan for next week's work. Where will you start?

-   Testing the code and fixing the errors. 
-   Adding probabilites in the code.
