---
title: "simulation"
format: html
editor: visual
---

## Source file

Referring to `pseudocode.qmd` and `craps-code.qmd` files, let's perform simulation in this file.

```{r, warning=FALSE}
library(tidyverse)
source("~/11-simulation-Dada-Z/craps-code.R") # source R file
# copy and paste code from carps-code.qmd to R file ...
```


**Experimental Setup**

-   Referring to the `pseudocode.qmd`, the probability of the game includes win and lose and was summarized in the tables with different conditions such as win at the first run, win at the `n` runs, lose at the first run, and lose at the `n` runs. 

-   The probabilities of four conditions are computed as below and the final simulation results were generated with `set.seed(123)` and `N = 300,000`. 


**Experimental Result**

| Conditions                | Probabilities |
|---------------------------|---------------|
| Win at first roll         | 0.2241        |
| Win at `n` rolls          | 0.2693967     |
| Lose at first roll        | 0.1117133     |
| Lose at `n` rolls         | 0.39479       |
| Sum of all conditions     | 1.0           |


-   The table shows the results of simulation with `N = 300,000`.

-   The probability of winning a crap game is 0.4935 and of losing the game is 0.5065. The total probabilities of all conditions are approximately to 1.0.

-   Referring to the results, the chance of winning and losing a game is not equal. The probability of losing the game is slightly larger than win the game (0.5065 \> 0.4935). 



## Probability - win at 1st run

Find the probability of wining at first roll
```{r}
# recall winning at first run
# total points = 7
fun_prob_first_roll_win <- function(N) {
  simulation_results <- replicate(N, simulate_craps_game() %>% summarize_craps_game(), simplify = FALSE)
  # convert to dataframe
  simulation_df <- bind_rows(simulation_results)
  # win at first run ....
  # if we do not set this n_rolls === 1, we can change "win" to "win-first" in craps-code ...
  first_roll_win <- sum(simulation_df$n_rolls == 1 & simulation_df$outcome == "win") 
  # n_rolls=1, see summarize_craps_game
  
  # probability
  prob_first_roll_win <- first_roll_win / N
  return(prob_first_roll_win)
}
```


## Probability - win at n run

```{r}
# recall table in `pseudocode` file

fun_prob_n_roll_win <- function(N) {
  simulation_results <- replicate(N, simulate_craps_game() %>% summarize_craps_game(), simplify = FALSE)
  # convert to dataframe
  simulation_df <- bind_rows(simulation_results)
  
  # win at n roll, `point` exists, point = None when win at 1st run
  point_win <- sum(!is.na(simulation_df$point) & simulation_df$outcome == "win")
  
  # probability
  prob_n_roll_win <- point_win / N
  return(prob_n_roll_win)
}
```


## Probability - lose at 1st run

```{r}
# recall table in `pseudocode` file
# total poins = 2, 3, 12
fun_prob_first_roll_loss <- function(N) {
  simulation_results <- replicate(N, simulate_craps_game() %>% summarize_craps_game(), simplify = FALSE)
  # convert to dataframe
  simulation_df <- bind_rows(simulation_results)
  # win at first run ....
  first_roll_loss <- sum(simulation_df$n_rolls == 1 & simulation_df$outcome == "lose(crapping out)")
  # probability
 prob_first_roll_loss <- first_roll_loss / N
  return(prob_first_roll_loss)
}
```


## Probability - loss at n run


```{r}
# recall table in `pseudocode` file

fun_prob_n_roll_loss <- function(N) {
  simulation_results <- replicate(N, simulate_craps_game() %>% summarize_craps_game(), simplify = FALSE)
  # convert to dataframe
  simulation_df <- bind_rows(simulation_results)
  # win at n roll, `point` exists 
  point_loss <- sum(!is.na(simulation_df$point) & simulation_df$outcome == "lose(7-out)")
  
  # probability
  prob_n_roll_loss <- point_loss / N
  return(prob_n_roll_loss)
}
```


```{r}
# function for multiple conditions...
win_loss_probabilities <- function(N) {
  simulation_results <- replicate(N, simulate_craps_game() %>% summarize_craps_game(), simplify = FALSE)
  simulation_df <- bind_rows(simulation_results)
  
  # recall function 
  fun_prob_first_roll_win  <- sum(simulation_df$n_rolls == 1 & simulation_df$outcome == "win") / N
  fun_prob_n_roll_win      <- sum(!is.na(simulation_df$point) & simulation_df$outcome == "win") / N
  fun_prob_first_roll_loss <- sum(simulation_df$n_rolls == 1 & simulation_df$outcome == "lose(crapping out)") / N
  fun_prob_n_roll_loss     <- sum(!is.na(simulation_df$point) & simulation_df$outcome == "lose(7-out)") / N
  
  # check total
  total <- fun_prob_first_roll_win + fun_prob_n_roll_win + fun_prob_first_roll_loss + fun_prob_n_roll_loss
  print(paste("Sum of all probabilities:", total))
  return(
    list(
      fun_prob_first_roll_win  = fun_prob_first_roll_win,
      fun_prob_n_roll_win      = fun_prob_n_roll_win,
      fun_prob_first_roll_loss = fun_prob_first_roll_loss,
      fun_prob_n_roll_loss     = fun_prob_n_roll_loss,
      total_prob = total
  ))
}
# the sum of probabilities should be 1.
```


```{r}
set.seed(123) # set.seed
# set.seed(5566)
N <- 300000 #300000 long time ...
probabilities <- win_loss_probabilities(N); probabilities

# when N <- 300000, output is:
# [1] "Sum of all probabilities: 1"
# $fun_prob_first_roll_win
# [1] 0.2241
# 
# $fun_prob_n_roll_win
# [1] 0.2693967
# 
# $fun_prob_first_roll_loss
# [1] 0.1117133
# 
# $fun_prob_n_roll_loss
# [1] 0.39479
# 
# $total_prob
# [1] 1
```

